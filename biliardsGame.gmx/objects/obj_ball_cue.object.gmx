<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ball_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
mouse_click_x=0;
mouse_click_y=0;

pulling=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_phygics">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collide</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ball_color">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collide</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phy_speed=0)
{
    mouse_click_x=mouse_x;
    mouse_click_y=mouse_y;

    pulling=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (phy_speed !=0) then exit;
var cue_x,cue_y,cue_dir;

if pulling
{
    //find directionl vector
    var dir_vec_x= x - mouse_click_x;
    var dir_vec_y= y - mouse_click_y;    
    var length= vector_length(dir_vec_x,dir_vec_y);
    
    //normalize
    dir_vec_x /=length;
    dir_vec_y /=length;
    
    //get pull vector
    var pull_vec_x= mouse_click_x-mouse_x;
    var pull_vec_y= mouse_click_y-mouse_y;
    
    //project pull onto dir
    var dot=dot_product(pull_vec_x,pull_vec_y,dir_vec_x,dir_vec_y);
    var project_vec_x= dir_vec_x*dot;
    var project_vec_y= dir_vec_y*dot;    
    
    //clamp vector
    var cue_vector_x=clamp_vector_x(project_vec_x,project_vec_y,640);
    var cue_vector_y=clamp_vector_y(project_vec_x,project_vec_y,640);
    
    cue_x= x-cue_vector_x - (dir_vec_x * 16);
    cue_y= y-cue_vector_y - (dir_vec_y * 16);    
    
    if !mouse_check_button(mb_left)
    {
        physics_apply_impulse(x,y,cue_vector_x,cue_vector_y);
        image_angle-=1
        pulling=false;
    }
}
else
{
    //find directional vector
    var dir_vec_x=x-mouse_x;
    var dir_vec_y=y-mouse_y;
    var length=vector_length(dir_vec_x,dir_vec_y);

    dir_vec_x /= length;
    dir_vec_y /= length;

    //get cue position
    cue_x=x-(dir_vec_x*16);
    cue_y=y-(dir_vec_y*16);
}
cue_dir=point_direction(cue_x,cue_y,x,y);
draw_sprite_ext(spr_cue,0,cue_x,cue_y,1,1,cue_dir,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.400000005960464</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.800000011920929</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.800000011920929</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.800000011920929</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
